/*
* This template will create an Azure Web App web site and hosting plan for use by Nether.
* 
* For more information, please refer to the Nether repository at: https://github.com/MicrosoftDX/nether/tree/master/deployment
*/
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "NetherWebDomainPrefix": {
            "type": "string",
            "minLength": 6,
            "maxLength": 12,
            "metadata": {
                "description": "The begining portion of the Nether web deployment URL (must be globally unique). only allows alpha characters and '-'. Cannot start or end with '-'." 
            }
        },
        "WebHostingPlan": { 
            "type": "string", 
            "defaultValue": "Free (no 'always on')", 
            "allowedValues": [ 
                "Free (no 'always on')", 
                "Shared", 
                "Basic B1", 
                "Basic B2", 
                "Basic B3", 
                "Standard S1", 
                "Standard S2", 
                "Standard S3", 
                "Premium P1", 
                "Premium P2", 
                "Premium P3"
            ], 
            "metadata": { 
                "description": "Specifies the database pricing/performance." 
            } 
        }, 
        "InstanceCount": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "Number of copies of the application. Limited based on hosting plan. "
            }
        },
        "DatabaseServerFQDN": {
            "type": "string",
            "metadata": {
                "description": "The FQDN URI of the Azure DB Server"
            }
        },
        "sqlServerDatabaseName": {
            "type": "string",
            "metadata": {
                "description": "The name of the database on the server to use"
            }
        },
        "sqlAdministratorLogin": {
            "type": "string",
            "metadata": {
                "description": "The admin user of the Azure DB Server"
            }
        },
        "sqlAdministratorPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The password of the admin user of the SQL Server"
            }
        },
        "eventhubSendPolicy": {
            "type": "object",
            "metadata": {
                "description": "An object that contains the following values about the event hub: uri, policyName, policyKey, connectionString"
            }
        },
        "webZipUri": {
            "type": "string",
            "metadata": {
                "description": "(Optional) Absolute URI containing the Nether API's deployment package (ZIP). If not included, you'll need to deploy the package seperately."
            }
        }
    },
    "variables": {
        "WebResourceAPI": "2015-08-01",
        "hostingPlanName": "[toLower(concat(parameters('NetherWebDomainPrefix'), '-hostingplan'))]",
        "webSiteName": "[toLower(concat(parameters('NetherWebDomainPrefix'), '-website'))]",
        /* The webHostingPlan specified in the input parameter is translated into the app host plan settings via this array */
        "HostingSKUs" : {
            "Free (no 'always on')" : {
                "tier": "Free",
                "size": "F1",
                "enableAlwaysOn": false
            },
            "Shared" : {
                "tier": "Shared",
                "size": "D1",
                "enableAlwaysOn": true
            },
            "Basic B1" : {
                "tier": "Basic",
                "size": "B1",
                "enableAlwaysOn": true
            },
            "Basic B2" : {
                "tier": "Basic",
                "size": "B2",
                "enableAlwaysOn": true
            },
            "Basic B3" : {
                "tier": "Basic",
                "size": "B3",
                "enableAlwaysOn": true
            },
            "Standard S1" : {
                "tier": "Standard",
                "size": "S1",
                "enableAlwaysOn": true
            },
            "Standard S2" : {
                "tier": "Standard",
                "size": "S2",
                "enableAlwaysOn": true
            },
            "Standard S3" : {
                "tier": "Standard",
                "size": "S3",
                "enableAlwaysOn": true
            },
            "Premium P1" : {
                "tier": "Premium",
                "size": "P1",
                "enableAlwaysOn": true
            },
            "Premium P2" : {
                "tier": "Premium",
                "size": "P2",
                "enableAlwaysOn": true
            },
            "Premium S3" : {
                "tier": "Premium",
                "size": "P3",
                "enableAlwaysOn": true
            }
        },
        "sqlConnString": "[concat('Data Source=tcp:',parameters('DatabaseServerFQDN'),',1433;Initial Catalog=',parameters('sqlServerDatabaseName'),';User Id=',parameters('sqlAdministratorLogin'),'@',parameters('DatabaseServerFQDN'),';Password=',parameters('sqlAdministratorPassword'),';')]"
    },
    "resources": [
        /* 
        * The web hosting plan for the Nether web site.
        * The hosting plan determines the performance and capacity of the web site.
        */
        {
            "type": "Microsoft.Web/serverfarms",
            "name": "[variables('hostingPlanName')]",
            "apiVersion": "[variables('WebResourceAPI')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "HostingPlan"
            },
            "sku":{
                "name": "[variables('HostingSKUs')[parameters('WebHostingPlan')].size]",
                "tier": "[variables('HostingSKUs')[parameters('WebHostingPlan')].tier]",
                "size": "[variables('HostingSKUs')[parameters('WebHostingPlan')].size]",
                "capacity": "[parameters('InstanceCount')]"
            },
            "properties": {
                "name": "[variables('hostingPlanName')]"
            }
        },
        /* 
        * Creates and configures the Nether Web Site host
        * The site will be set up to allow MSDeploy (web deploy) and given configuration settings
        * for use by the Nether application
        */
        {
            "type": "Microsoft.Web/sites",
            "name": "[variables('webSiteName')]",
            "apiVersion": "[variables('WebResourceAPI')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[variables('hostingPlanName')]"
            ],
            "tags": {
                "displayName": "WebSite"
            },
            "properties":{
                "name": "[variables('webSiteName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
            },
            "resources": [
                /* enable MSDeploy (web deploy) */
                {
                    "type": "extensions",
                    "name": "MSDeploy",
                    "apiVersion": "[variables('WebResourceAPI')]",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites/', variables('webSiteName'))]"
                    ],
                    "tags": {
                        "displayName": "DeployTheZip"
                    },
                    "properties": {
                        "packageUri": "[parameters('webZipUri')]"
                    }
                },
                /* Set up the various Nether application configuration settings */
                {
                    "type": "config",
                    "name": "appsettings",
                    "apiVersion": "[variables('WebResourceAPI')]",
                    "dependsOn": [
                        "[variables('webSiteName')]",
                        "MSDeploy"
                    ],
                    "properties": {
                        /* TODO: Add explanation of section */
                        "alwaysOn": "[variables('HostingSKUs')[parameters('WebHostingPlan')].enableAlwaysOn]",
                        "WEB_HOST_URL": "[concat('https://', reference(variables('webSiteName')).hostNames[0])]",
                        "ASPNETCORE_ENVIRONMENT": "Development",
                        "Common:Cors:AllowedOrigins": "",

                        /* TODO: Add explanation of section */
                        "Leaderboard:Store:wellknown": "sql",
                        "Leaderboard:Store:properties:ConnectionString": "[variables('sqlConnString')]",
                        "Leaderboard:AnalyticsIntegrationClient:wellknown" : "default",
                        "Leaderboard:AnalyticsIntegrationClient:properties:AnalyticsBaseUrl" : "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/api/')]",

                        /* TODO: Add explanation of section */
                        "AdminWebUi:AuthServerUrl": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/identity/')]",
                        "AdminWebUi:ApiBaseUrl": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/api/')]",
                        "AdminWebUi:RedirectUrl": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/ui/admin/')]",

                        /* TODO: Add explanation of section */
                        "PlayerManagement:Store:wellknown": "sql",
                        "PlayerManagement:Store:properties:ConnectionString": "[variables('sqlConnString')]",

                        /* TODO: Add explanation of section */
                        "Analytics:EventHub:Ttl" : "24:00:00", 
                        "Analytics:EventHub:Resource": "[parameters('eventhubSendPolicy').uri]",
                        "Analytics:EventHub:KeyName": "[parameters('eventhubSendPolicy').policyName]",
                        "Analytics:EventHub:AccessKey": "[parameters('eventhubSendPolicy').policyKey]",

                        /* TODO: Add explanation of section */
                        "Identity:Store:wellknown": "sql",
                        "Identity:Store:properties:ConnectionString": "[variables('sqlConnString')]",

                        /* TODO: Add explanation of section */
                        "Identity:Clients:clientcredstest:Name": "Test Client for client credentials flow",
                        "Identity:Clients:clientcredstest:AllowedGrantTypes": "client_credentials",
                        "Identity:Clients:clientcredstest:ClientSecrets": "devsecret",
                        "Identity:Clients:clientcredstest:AllowedScopes": "openid, profile, nether-all",

                        /* TODO: Add explanation of section */
                        "Identity:Clients:resourceownertest:AllowedGrantTypes": "password",
                        "Identity:Clients:resourceownertest:ClientSecrets": "devsecret",
                        "Identity:Clients:resourceownertest:AllowedScopes": "nether-all",

                        /* TODO: Add explanation of section */
                        "Identity:Clients:customgranttest:AllowedGrantTypes": "fb-usertoken",
                        "Identity:Clients:customgranttest:ClientSecrets": "devsecret",
                        "Identity:Clients:customgranttest:AllowedScopes": "nether-all",

                        /* TODO: Add explanation of section */
                        "Identity:PlayerManagementClient:wellknown": "default",
                        "Identity:PlayerManagementClient:properties:IdentityBaseUrl": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/identity')]",
                        "Identity:PlayerManagementClient:properties:ApiBaseUrl": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/api')]",

                        /* TODO: Add explanation of section */
                        "Identity:IdentityServer:RequireHttps": "true",
                        "Identity:IdentityServer:Authority": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/identity')]",
                        "Identity:IdentityServer:UiBaseUrl": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/ui')]",

                        /* TODO: Add explanation of section */
                        "Identity:Clients:swaggerui:RedirectUris": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/api/swagger/ui/o2c.html')]",
                        "Identity:Clients:swaggerui:AllowedRedirectUris": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/api/swagger/ui/o2c.html')]",

                        /* TODO: Add explanation of section */
                        "Identity:Clients:devclient:RedirectUris": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/signin-oidc')]",
                        "Identity:Clients:devclient:AllowedRedirectUris": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/signin-oidc')]",
                        "Identity:Clients:devclient:PostLogoutRedirectUris": "[concat('https://', reference(variables('webSiteName')).hostNames[0])]",

                        /* TODO: Add explanation of section */
                        "Identity:Clients:angular2client:RedirectUris": "[concat('https://', reference(variables('webSiteName')).hostNames[0])]",
                        "Identity:Clients:angular2client:AllowedRedirectUris": "[concat('https://', reference(variables('webSiteName')).hostNames[0])]",
                        "Identity:Clients:angular2client:PostLogoutRedirectUris": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/login')]",
                        "Identity:Clients:angular2client:AllowedCorsOrigins": "[concat('http://', reference(variables('webSiteName')).hostNames[0],',https://', reference(variables('webSiteName')).hostNames[0])]",

                        /* TODO: Add explanation of section */
                        "Identity:Clients:jstest:RedirectUris": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/ui/features/identity-test/callback.html')]",
                        "Identity:Clients:jstest:AllowedRedirectUris": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/ui/features/identity-test/callback.html')]",
                        "Identity:Clients:jstest:PostLogoutRedirectUris": "[concat('https://', reference(variables('webSiteName')).hostNames[0], '/ui/features/identity-test/index.html')]",
                        "Identity:Clients:jstest:AllowedCorsOrigins": "[concat('http://', reference(variables('webSiteName')).hostNames[0],',https://', reference(variables('webSiteName')).hostNames[0])]"
                    }
                }
            ]
        }
    ],
    /* outputs: 
    *   webSiteFQDN: the host name (URI) for the web site
    */
    "outputs": {
        "webSiteFQDN" : {
            "type" : "string",
            "value": "[reference(variables('webSiteName')).hostNames[0]]"
        }
    }
}